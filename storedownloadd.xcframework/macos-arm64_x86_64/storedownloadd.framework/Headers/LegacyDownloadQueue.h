//
//   Generated by https://github.com/blacktop/ipsw (Version: , BuildCommit: )
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 14.4, SDK: 14.4, Tools: [ld (902.8), ld (951.9)]
//    - LC_SOURCE_VERSION: 714.4.9.0.0
//
#ifndef LegacyDownloadQueue_h
#define LegacyDownloadQueue_h

@import Foundation;

@class ISServiceProxy, ISStoreClient; // @import StoreFoundation;
@class Download; // #include "Download.h"
@class DownloadErrorHandler; // #include "DownloadErrorHandler.h"
@class StoreDownloadQueueSource; // #include "StoreDownloadQueueSource.h"

@protocol ISOperationDelegate; // @import CommerceKit;
@protocol DownloadQueueSourceDelegate; // #include "DownloadQueueSourceDelegate-Protocol.h"

@interface LegacyDownloadQueue : NSObject <DownloadQueueSourceDelegate, ISOperationDelegate> {
    /* instance variables */
    DownloadErrorHandler *_errorHandler;
    signed char _isSynching;
    StoreDownloadQueueSource *_source;
    NSMutableArray *_activeDownloads;
    NSMutableDictionary *_observers;
    NSLock *_observersLock;
    NSMutableArray *_queueCheckClients;
}

@property (readonly) ISServiceProxy *serviceProxy;
@property (readonly) ISStoreClient *storeClient;
@property (readonly) long long numberOfActiveDownloads;
@property (readonly) long long numberOfDownloadsWaiting;
@property (readonly) long long numberOfDownloadsInstalling;
@property (readonly, nonatomic) signed char active;
@property (retain, nonatomic) Download *activeStagingDownload;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)queueForStoreClient:(id)_forStoreClient;
+ (id)downloadWithItemIdentifier:(unsigned long long)_withItemIdentifier;

/* instance methods */
- (signed char)checkAutomaticDownloadQueue;
- (id)automaticDownloadKinds;
- (id)initWithStoreClient:(id)_storeClient;
- (void)dealloc;
- (signed char)addDownloads:(id)_downloads;
- (id)downloadsWithType:(long long)_withType;
- (id)copyDownloads;
- (id)downloadWithItemIdentifier:(unsigned long long)_withItemIdentifier;
- (id)downloadForIdentifier:(unsigned long long)_forIdentifier;
- (id)downloadsForPurchaseResponse:(id)_forPurchaseResponse;
- (id)_downloadForSSDownload:(id)_forSSDownload;
- (signed char)pauseDownload:(id)_download;
- (void)pauseDownloads:(id)_downloads;
- (signed char)resumeDownload:(id)_download;
- (void)_setDownloadsToPaused:(id)_downloadsToPaused;
- (signed char)retryFailedDownloads;
- (void)_pauseDownloadWithIdentifier:(id)_downloadWithIdentifier;
- (void)_resumeDownloadWithIdentifier:(id)_downloadWithIdentifier;
- (void)_purchaseOperationFinishedSuccessfully:(id)_operationFinishedSuccessfully;
- (void)removeDownloads:(id)_downloads;
- (void)cancelDownload:(id)_download confirm:(signed char)_confirm askToDelete:(signed char)_toDelete;
- (void)cancelDownload:(id)_download confirm:(signed char)_confirm;
- (signed char)_runCancelConfirmDialogForDownload:(id)_cancelConfirmDialogForDownload askToDelete:(signed char)_toDelete;
- (void)_informServerThatUserCanceledDownload:(id)_serverThatUserCanceledDownload;
- (signed char)startFirstReadyDownload;
- (signed char)isActive;
- (void)_triggerDownloadsNotification:(id)_downloadsNotification;
- (void)checkManifest;
- (signed char)checkQueue;
- (signed char)checkStoreDownloadQueueForAccount:(id)_storeDownloadQueueForAccount;
- (void)mergeInQueueResponse:(id)_inQueueResponse forIdentifier:(unsigned long long)_identifier;
- (void)updateManifest;
- (signed char)isActiveDownload:(id)_activeDownload;
- (signed char)canStartDownload:(id)_startDownload;
- (id)availableSpaceOnDiskAtPath:(id)_spaceOnDiskAtPath;
- (long long)availableDiskSpaceForDownload:(id)_diskSpaceForDownload;
- (long long)_availableDiskSpaceAtPath:(id)_diskSpaceAtPath excludingDownload:(id)_download;
- (id)downloadsWithInfo:(id)_withInfo;
- (void)pauseDownloadWithXPCInfo:(id)_downloadWithXPCInfo;
- (void)resumeDownloadWithXPCInfo:(id)_downloadWithXPCInfo;
- (void)cancelDownloadWithXPCInfo:(id)_downloadWithXPCInfo confirm:(signed char)_confirm;
- (signed char)addDownloadWithDownload:(id)_downloadWithDownload completionHandler:(id /* block */)_handler;
- (void)pauseDownloadWithIdentifer:(id)_downloadWithIdentifer;
- (void)checkServerQueueWithCompletionHandler:(id /* block */)_serverQueueWithCompletionHandler;
- (void)checkServerDownloadQueueWithDSID:(id)_serverDownloadQueueWithDSID forPurchaseItems:(id)_purchaseItems;
- (void)checkQueuesWithInfo:(id)_queuesWithInfo;
- (void)removeDownloadWithIdentifer:(id)_downloadWithIdentifer;
- (void)removeDownloadWithInfo:(id)_downloadWithInfo;
- (void)_removeDownloadWithIdentifier:(id)_downloadWithIdentifier confirm:(signed char)_confirm;
- (void)resumeDownloadWithIdentifer:(id)_downloadWithIdentifer;
- (signed char)cacheReceiptAsString:(id)_receiptAsString forDownload:(id)_download returningError:(id *)_error;
- (void)_startWatchingSources;
- (void)_stopWatchingSources;
- (void)downloadDidChange:(id)_didChange changeType:(unsigned long long)_type changeSet:(id)_set;
- (void)_handleDownloadsChange;
- (void)downloadQueueSourceChangedFirstReadyDownload:(id)_queueSourceChangedFirstReadyDownload;
- (void)downloadQueueSourceFinishedCheckWithNewDownloads:(unsigned long long)_queueSourceFinishedCheckWithNewDownloads totalFound:(unsigned long long)_found;
- (id)_threadSafeClientsArrayCopy;
- (void)operation:(id)_operation failedWithError:(id)_withError;
- (void)operation:(id)_operation updatedProgress:(id)_progress;
- (void)operationFinished:(id)_finished;
- (id)addDownloadQueueObserver:(id)_downloadQueueObserver;
- (void)removeDownloadQueueObserver:(id)_downloadQueueObserver;
- (void)_setWaitingStateForDownload:(id)_waitingStateForDownload;
- (void)_notifyObserversOfAdditions:(id)_observersOfAdditions;
- (void)_notifyObserversOfRemovals:(id)_observersOfRemovals;
- (void)_notifyObserversOfStatusUpdateForDownload:(id)_observersOfStatusUpdateForDownload;
- (id)_sourceForDownload:(id)_forDownload;
- (void)contentSizeDidChangeForDownload:(id)_sizeDidChangeForDownload;

@end

#endif /* LegacyDownloadQueue_h */
